name: XHlive

on:
  schedule:
    - cron: '0 11,23 * * *'  # 每天早/晚11时（UTC时间）
  workflow_dispatch:
    inputs:
      rebuild:
        description: '忽略构建记录以重新构建'
        required: false
        type: boolean
      donotpublish:
        description: '构建后不提交发布新版'
        required: false
        type: boolean

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - userName: xisohi
            repoName: XHlive
            branchName: main
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check New Commit
        run: |
          upStream="https://github.com/${{  matrix.userName }}/${{ matrix.repoName }}"
          echo "upStream=$upStream" >> $GITHUB_ENV
          commit=$(curl -sL "https://api.github.com/repos/${{  matrix.userName }}/${{ matrix.repoName }}/commits/${{ matrix.branchName }}" | jq -r '.sha')
          if [ $? -ne 0 ]; then
            echo "Failed to get commit from API"
            exit 1
          fi
          if [ -z "$commit" ] || ! grep -q "$commit" README.md; then
            echo "commit=$commit" >> $GITHUB_ENV
            echo "commitS=${commit:0:7}" >> $GITHUB_ENV
          fi
      - name: Generate Tag Name
        if: ${{ env.commit }}
        run: |
          TAG_NAME="v$(date +'%y.%m.%d.%H')"
          echo "tag_name=$TAG_NAME" >> $GITHUB_ENV
          VERSION_CODE="$(date +'%y%m%d%H')"
          echo "version_code=$VERSION_CODE" >> $GITHUB_ENV

      - name: Update version
        if: ${{ env.commit }}
        run: |
          sed -i "s/\"version_code\": [0-9]*/\"version_code\": ${{ env.version_code }}/" version.json
          sed -i "s/\"version_name\": \"v[0-9]*\.[0-9]*\.[0-9]*\.[0-9]*\"/\"version_name\": \"${{ env.tag_name }}\"/" version.json

      - name: Commit and push version.json changes
        if: ${{ env.commit }}
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add version.json
          git commit -m "Update version.json"
          git push
          git rev-parse HEAD > commitSHA.txt
          echo "NEWSHA=$(cat commitSHA.txt)" >> $GITHUB_ENV

      - name: Create Tag
        if: ${{ env.commit }}
        run: |
          git tag ${{ env.tag_name }} ${{ env.NEWSHA }}
          git push origin ${{ env.tag_name }}

      - name: Build project
        if: ${{ env.commit }}
        run: |
          python setup.py build

      - name: Create Release
        id: create_release
        if: ${{ env.commit }}
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.tag_name }}
          release_name: Release ${{ env.tag_name }}
          draft: false
          prerelease: false
          body_path: history.md

      - name: Upload Release Asset
        if: ${{ env.commit }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./output/TVBoxOSC-${{ env.tag_name }}.zip
          asset_name: TVBoxOSC-${{ env.tag_name }}.zip
          asset_content_type: application/zip